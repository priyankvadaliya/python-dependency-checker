import re
import concurrent.futures
import requests
from functools import lru_cache

def parse_dependencies(requirements_text):
    """Parse requirements text into list of package names and versions."""
    packages = []
    for line in requirements_text.strip().split('\n'):
        # Skip comments and empty lines
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        
        packages.append(line)
    
    return packages

@lru_cache(maxsize=100)
def get_package_metadata(package_name):
    """
    Get package metadata from PyPI.
    This is much faster than using pip commands.
    """
    try:
        response = requests.get(f"https://pypi.org/pypi/{package_name}/json", timeout=5)
        if response.status_code == 200:
            return response.json()
        return None
    except Exception:
        return None

def extract_requirements_from_metadata(metadata):
    """Extract requirements from PyPI metadata."""
    if not metadata or 'info' not in metadata:
        return []
    
    requires_dist = metadata['info'].get('requires_dist', [])
    if not requires_dist:
        return []
    
    requirements = []
    for req in requires_dist:
        # Parse requirement string
        if ";" in req:  # Has environment markers
            req_name = req.split(";")[0].strip()
        else:
            req_name = req
        
        # Extract just the package name
        package_name = req_name.split(" ")[0].strip()
        requirements.append(package_name)
    
    return requirements

def check_package_conflict(req, all_requirements):
    """Check if a single package has conflicts with other requirements."""
    conflicts = []
    suggestions = []
    
    # Extract package name and version
    package_name = req.split('==')[0].split('>=')[0].split('<=')[0].split('>')[0].split('<')[0].split('~=')[0].strip()
    version_spec = None
    if '==' in req:
        version_spec = '=='
        version = req.split('==')[1]
    elif '>=' in req:
        version_spec = '>='
        version = req.split('>=')[1]
    elif '<=' in req:
        version_spec = '<='
        version = req.split('<=')[1]
    elif '>' in req:
        version_spec = '>'
        version = req.split('>')[1]
    elif '<' in req:
        version_spec = '<'
        version = req.split('<')[1]
    elif '~=' in req:
        version_spec = '~='
        version = req.split('~=')[1]
    
    # Check if package exists
    metadata = get_package_metadata(package_name)
    if not metadata:
        conflicts.append({
            'package': package_name,
            'error': f"Package '{package_name}' not found on PyPI",
            'type': 'missing_package',
            'suggestion': f"Check if package name is correct or if it's a private package"
        })
        return conflicts, suggestions
    
    # Check if the specified version exists
    if version_spec == '==' and version:
        if version not in metadata.get('releases', {}):
            conflicts.append({
                'package': package_name,
                'error': f"Version {version} not found for package '{package_name}'",
                'type': 'version_not_found',
                'suggestion': f"Check available versions at https://pypi.org/project/{package_name}/"
            })
            
            # Suggest the latest version
            latest_version = metadata['info'].get('version')
            if latest_version:
                suggestions.append(f"{package_name}=={latest_version}")
            
            return conflicts, suggestions
    
    # Get package dependencies
    dependencies = extract_requirements_from_metadata(metadata)
    
    # Check for conflicts with other requirements
    for other_req in all_requirements:
        if other_req == req:
            continue
        
        other_package = other_req.split('==')[0].split('>=')[0].split('<=')[0].split('>')[0].split('<')[0].split('~=')[0].strip()
        
        # Check for duplicate package with different version
        if other_package == package_name and '==' in other_req and '==' in req:
            this_version = req.split('==')[1]
            other_version = other_req.split('==')[1]
            
            if this_version != other_version:
                conflicts.append({
                    'package': package_name,
                    'error': f"Duplicate package '{package_name}' with different versions: {this_version} and {other_version}",
                    'type': 'duplicate_package',
                    'suggestion': f"Use only one version or use a compatible version specifier like {package_name}~={this_version}"
                })
                
                # Suggest using the newer version
                versions = [this_version, other_version]
                versions.sort(reverse=True)  # Simple version sort, not semantic
                suggestions.append(f"{package_name}=={versions[0]}")
    
    # For each dependency, check if it conflicts with other requirements
    for dep in dependencies:
        dep_name = dep.split(' ')[0]
        
        for other_req in all_requirements:
            other_package = other_req.split('==')[0].split('>=')[0].split('<=')[0].split('>')[0].split('<')[0].split('~=')[0].strip()
            
            if other_package == dep_name:
                # This is a potential conflict, check versions
                # Note: This is a simplified check and could be enhanced with proper version parsing
                if '==' in other_req and ('<' in dep or '>' in dep):
                    other_version = other_req.split('==')[1]
                    
                    # Simple check for version conflicts
                    if ('<' in dep and other_version >= dep.split('<')[1].strip()) or \
                       ('>' in dep and other_version <= dep.split('>')[1].strip()):
                        conflicts.append({
                            'package': package_name,
                            'error': f"{package_name} requires {dep}, but found {other_req}",
                            'type': 'dependency_conflict',
                            'suggestion': f"Adjust {other_package} version to be compatible with {dep}"
                        })
                        
                        # Suggest a compatible version
                        if '<' in dep:
                            version = dep.split('<')[1].strip()
                            major, minor = version.split('.')[:2]
                            suggested_version = f"{major}.{str(int(minor) - 1)}"
                            suggestions.append(f"{other_package}<{version}")
                        elif '>' in dep:
                            version = dep.split('>')[1].strip()
                            major, minor = version.split('.')[:2]
                            suggested_version = f"{major}.{str(int(minor) + 1)}"
                            suggestions.append(f"{other_package}>{version}")
    
    return conflicts, suggestions

def detect_conflicts_parallel(requirements):
    """
    Analyze requirements for conflicts using parallel processing.
    """
    all_conflicts = []
    all_suggestions = []
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=min(10, len(requirements))) as executor:
        # Submit all tasks
        future_to_req = {
            executor.submit(check_package_conflict, req, requirements): req 
            for req in requirements
        }
        
        # Process results as they complete
        for future in concurrent.futures.as_completed(future_to_req):
            conflicts, suggestions = future.result()
            all_conflicts.extend(conflicts)
            all_suggestions.extend(suggestions)
    
    return all_conflicts, all_suggestions

def get_limited_dependency_tree(requirements, max_depth=2):
    """Generate a simplified dependency tree for visualization."""
    tree_data = []
    
    for req in requirements:
        package_name = req.split('==')[0].split('>=')[0].split('<=')[0].split('>')[0].split('<')[0].split('~=')[0].strip()
        
        # Get package metadata
        metadata = get_package_metadata(package_name)
        if not metadata:
            continue
        
        # Create package node
        package_info = {
            'package_name': package_name,
            'dependencies': []
        }
        
        # Add first level dependencies only (for performance)
        dependencies = extract_requirements_from_metadata(metadata)
        for dep in dependencies:
            dep_name = dep.split(' ')[0]
            package_info['dependencies'].append({
                'package_name': dep_name,
                'dependencies': []
            })
        
        tree_data.append(package_info)
    
    return tree_data